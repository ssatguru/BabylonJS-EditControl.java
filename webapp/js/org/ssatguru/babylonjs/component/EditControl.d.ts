declare namespace org.ssatguru.babylonjs.component {
    import AbstractMesh = BABYLON.AbstractMesh;
    import Camera = BABYLON.Camera;
    import Mesh = BABYLON.Mesh;
    import Vector3 = BABYLON.Vector3;
    class EditControl {
        private meshPicked;
        private canvas;
        private scene;
        private mainCamera;
        private theParent;
        private local;
        private snapT;
        private snapR;
        private transSnap;
        private rotSnap;
        private axesLen;
        private axesScale;
        private redMat;
        private greenMat;
        private blueMat;
        private whiteMat;
        private yellowMat;
        private actHist;
        private renderer;
        private pointerdown;
        private pointerup;
        private pointermove;
        constructor(mesh: Mesh, camera: Camera, canvas: HTMLCanvasElement, scale: number);
        private renderLoopProcess();
        switchTo(mesh: Mesh): void;
        setUndoCount(c: number): void;
        undo(): void;
        redo(): void;
        detach(): void;
        disposeAll(): void;
        private pDown;
        private axisPicked;
        private onPointerDown(evt);
        isEditing(): boolean;
        private detachControl(cam, can);
        private prevOverMesh;
        private pointerIsOver;
        isPointerOver(): boolean;
        private onPointerOver();
        private restoreColor(mesh);
        editing: boolean;
        private onPointerUp(evt);
        private prevPos;
        private snapX;
        private snapY;
        private snapZ;
        private snapRX;
        private snapRY;
        private snapRZ;
        private onPointerMove(evt);
        private doTranslation(newPos);
        private doScaling(newPos);
        eulerian: boolean;
        private doRotation(newPos);
        private getPosOnPickPlane();
        private hideBaxis();
        private setAxisVisiblity(v);
        private transEnabled;
        isTranslationEnabled(): boolean;
        enableTranslation(): void;
        disableTranslation(): void;
        private rotEnabled;
        isRotationEnabled(): boolean;
        enableRotation(): void;
        disableRotation(): void;
        private scaleEnabled;
        isScaleEnabled(): boolean;
        enableScaling(): void;
        disableScaling(): void;
        private bXaxis;
        private bYaxis;
        private bZaxis;
        private xaxis;
        private yaxis;
        private zaxis;
        private guideCtl;
        private createGuideAxes();
        private pickPlane;
        private createPickPlane();
        private tCtl;
        private tX;
        private tY;
        private tZ;
        private tEndX;
        private tEndY;
        private tEndZ;
        private createTransAxes();
        private rCtl;
        private rX;
        private rY;
        private rZ;
        private rEndX;
        private rEndY;
        private rEndZ;
        private createRotAxes();
        private extrudeBox(w, l);
        private createCircle(r);
        private sCtl;
        private sX;
        private sY;
        private sZ;
        private sAll;
        private sEndX;
        private sEndY;
        private sEndZ;
        private sEndAll;
        private createScaleAxes();
        private localX;
        private localY;
        private localZ;
        private localRot;
        private setLocalAxes(mesh);
        setLocal(l: boolean): void;
        isLocal(): boolean;
        setTransSnap(s: boolean): void;
        setRotSnap(s: boolean): void;
        setTransSnapValue(t: number): void;
        setRotSnapValue(r: number): void;
        private setAxesScale();
        static getAngle(p1: Vector3, p2: Vector3, p: Vector3, cN: Vector3): number;
        private createMaterials(scene);
        private disposeMaterials();
        private static getStandardMaterial(name, col, scene);
    }
    class ActHist {
        private mesh;
        private lastMax;
        private acts;
        private last;
        private current;
        constructor(mesh: AbstractMesh, capacity: number);
        setCapacity(c: number): void;
        add(): void;
        undo(): void;
        redo(): void;
    }
    class Act {
        private p;
        private r;
        private s;
        constructor(mesh: AbstractMesh);
        perform(mesh: AbstractMesh): void;
    }
}
